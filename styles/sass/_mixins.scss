// Variables
$ease: all 0.3s ease-in-out 0s;
$fast: all 0.2s;

// generic transform
@mixin transform($transforms) {
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}
// rotate
@mixin rotate ($deg) {
  @include transform(rotate(#{$deg}deg));
}
 
// scale
@mixin scale($scale) {
  @include transform(scale($scale));
} 
// translate
@mixin translate ($x, $y) {
  @include transform(translate($x, $y));
}
// skew
@mixin skew ($x, $y) {
  @include transform(skew(#{$x}deg, #{$y}deg));
}

@mixin transition($speed) {
  transition: $speed;
}

@mixin box-shadow($top, $left, $blur, $color, $inset:"") {
  box-shadow:$top $left $blur $color #{$inset};
  }

@mixin text-shadow($top, $left, $blur, $color, $inset:"") {
  text-shadow:$top $left $blur $color #{$inset};
}

//

@mixin screen--xs {
  @media only screen and (max-width: #{$grid-breakpoint-s}) {
   @content;
  }
}

@mixin screen--s {
  @media only screen and (min-width: #{$grid-breakpoint-s + 1px}) {
   @content;
  }
}

@mixin screen--m {
  @media only screen and (min-width: #{$grid-breakpoint-m}) {
   @content;
  }
}
@mixin screen--l {
  @media only screen and (min-width: #{$grid-breakpoint-l}) {
   @content;
  }
}
@mixin screen--xl {
  @media only screen and (min-width: #{$grid-breakpoint-xl}) {
   @content;
  }
}

@mixin responsive-versions {
  @include mobile {
   &\@mobile {
    @content;
   }
  }
  @include tablet {
   &\@tablet {
    @content;
   }
  }
  @include desktop {
   &\@desktop {
    @content;
   }
  }
}

@mixin spacing($value, $breakpoint) {
  .u-margin {
   &-#{strip-unit($value) * 10}#{$breakpoint} {
    margin: $value;
   }
   &-top-#{strip-unit($value) * 10}#{$breakpoint} {
    margin-top: $value;
   }
   &-bottom-#{strip-unit($value) * 10}#{$breakpoint} {
    margin-bottom: $value;
   }
   &-left-#{strip-unit($value) * 10}#{$breakpoint} {
    margin-left: $value;
   }
   &-right-#{strip-unit($value) * 10}#{$breakpoint} {
    margin-right: $value;
   }
  }
  .u-padding {
   &-#{strip-unit($value) * 10}#{$breakpoint} {
    padding: $value;
   }
   &-top-#{strip-unit($value) * 10}#{$breakpoint} {
    padding-top: $value;
   }
   &-bottom-#{strip-unit($value) * 10}#{$breakpoint} {
    padding-bottom: $value;
   }
   &-left-#{strip-unit($value) * 10}#{$breakpoint} {
    padding-left: $value;
   }
   &-right-#{strip-unit($value) * 10}#{$breakpoint} {
    padding-right: $value;
   }
  }
}

@mixin placeholder($color) {
  &::-webkit-input-placeholder {
   color: $color;
   opacity: 1;
  }
  &::-moz-placeholder {
   color: $color;
   opacity: 1;
  }
  &:-ms-input-placeholder {
   color: $color;
   opacity: 1;
  }
  &:-moz-placeholder {
   color: $color;
   opacity: 1;
  }
}

@mixin linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
   $color-stops: $direction, $color-stops;
   $direction: 180deg;
  }
  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}

@mixin text-small {
  font-size: $font-size-s;
  line-height: $line-height-s;
}

@mixin text-large {
  font-size: $font-size-l;
  line-height: $line-height-l;
}

@mixin text-x-large {
  font-size: $font-size-xl;
  line-height: $line-height-xl;
}

@mixin text-xx-large {
  font-size: $font-size-xxl;
  line-height: $line-height-xxl;
}